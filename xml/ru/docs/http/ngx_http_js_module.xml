<?xml version="1.0"?>

<!--
  Copyright (C) Nginx, Inc.
  -->

<!DOCTYPE module SYSTEM "../../../../dtd/module.dtd">

<module name="Модуль ngx_http_js_module"
        link="/ru/docs/http/ngx_http_js_module.html"
        lang="ru"
        rev="11">

<section id="summary">

<para>
Модуль <literal>ngx_http_js_module</literal> позволяет задавать
обработчики location и переменных
на <link doc="../njs_about.xml">njs</link> —
подмножестве языка JavaScript.
</para>

<para>
По умолчанию этот модуль не собирается, его необходимо собрать с
модулем njs с помощью конфигурационного параметра
<literal>--add-module</literal>:
<example>
./configure --add-module=<value>path-to-njs</value>/nginx
</example>
<link url="http://hg.nginx.org/njs">Репозиторий</link>
модуля njs можно клонировать следующей командой
(необходим клиент <link url="https://www.mercurial-scm.org">Mercurial</link>):
<example>
hg clone http://hg.nginx.org/njs
</example>
Модуль также можно собрать как
<link doc="../ngx_core_module.xml" id="load_module">динамический</link>:
<example>
./configure --add-dynamic-module=<value>path-to-njs</value>/nginx
</example>
</para>

</section>


<section id="example" name="Пример конфигурации">

<para>
<example>
js_include http.js;

js_set $foo     foo;
js_set $summary summary;

server {
    listen 8000;

    location / {
        add_header X-Foo $foo;
        js_content baz;
    }

    location /summary {
        return 200 $summary;
    }
}
</example>
</para>

<para>
Файл <path>http.js</path>:
<example>
function foo(req, res) {
    req.log("hello from foo() handler");
    return "foo";
}

function summary(req, res) {
    var a, s, h;

    s = "JS summary\n\n";

    s += "Method: " + req.method + "\n";
    s += "HTTP version: " + req.httpVersion + "\n";
    s += "Host: " + req.headers.host + "\n";
    s += "Remote Address: " + req.remoteAddress + "\n";
    s += "URI: " + req.uri + "\n";

    s += "Headers:\n";
    for (h in req.headers) {
        s += "  header '" + h + "' is '" + req.headers[h] + "'\n";
    }

    s += "Args:\n";
    for (a in req.args) {
        s += "  arg '" + a + "' is '" + req.args[a] + "'\n";
    }

    return s;
}

function baz(req, res) {
    res.headers.foo = 1234;
    res.status = 200;
    res.contentType = "text/plain; charset=utf-8";
    res.contentLength = 15;
    res.sendHeader();
    res.send("nginx");
    res.send("java");
    res.send("script");

    res.finish();
}
</example>
</para>

</section>


<section id="directives" name="Директивы">

<directive name="js_content">
<syntax><value>функция</value></syntax>
<default/>
<context>location</context>
<context>limit_except</context>

<para>
Задаёт функцию njs в качестве обработчика содержимого location.
</para>

</directive>


<directive name="js_include">
<syntax><value>файл</value></syntax>
<default/>
<context>http</context>

<para>
Задаёт файл, позволяющий задавать обработчики location и переменных
на njs.
</para>

</directive>


<directive name="js_set">
<syntax>
<value>$переменная</value> <value>функция</value></syntax>
<default/>
<context>http</context>

<para>
Задаёт функцию njs для указанной переменной.
</para>

</directive>

</section>


<section id="arguments" name="Аргументы запроса и ответа">

<para>
Каждый HTTP-обработчик njs получает два аргумента,
<link doc="../njs/njs_api.xml" id="http_request">запрос</link>
и <link doc="../njs/njs_api.xml" id="http_response">ответ</link>.
</para>

</section>

</module>
